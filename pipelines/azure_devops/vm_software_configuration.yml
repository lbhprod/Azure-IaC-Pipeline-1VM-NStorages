trigger:
- none

pool: my-personal-computer

parameters:
- name: activeVariableGroupName
  displayName: active Variable Group Name
  type: string
  default: ''
- name: resourceGroupName
  displayName: Resource Group Name
  type: string
  default: ''
- name: azureServiceConnection
  displayName: Azure Service Connection
  type: string
  default: ''
- name: vmName
  displayName: VM Name (default takes the value from variable group)
  type: string
  default: 'default'
- name: debug
  displayName: Debug Mode
  type: boolean
  default: true

variables:
- group: ${{ parameters.activeVariableGroupName }}
- name:  system.debug
  value: ${{ parameters.debug }}

jobs: 
- job: VMSoftwareConfiguration
  displayName: 'Configure VM Software'
  steps:
    # Step 0: Retrieve VM name from the variable group (only if parameter is in default mode)
    - script: | 
        # Login to Azure DevOps and capture output
        echo $(AccessToken) | az devops login
        
        echo "Retrieving VM name from the variable group if parameter is in default mode"
        
        # Check if the vmName parameter is default
        if [ "${{ parameters.vmName }}" = "default" ]; then
          echo "vmName parameter is in default mode. Retrieving from variable group."

          # Get the variable group ID by name
          groupId=$(az pipelines variable-group list --group-name "${{ parameters.activeVariableGroupName }}" --query '[0].id' -o tsv)
          if [ -z "$groupId" ]; then
            echo "Variable group not found: ${{ parameters.activeVariableGroupName }}"
            exit 1
          fi

          # Retrieve the vmName variable value from the variable group
          vmName=$(az pipelines variable-group variable list --group-id $groupId --query "vmName.value" -o tsv)
          if [ -z "$vmName" ]; then
            echo "vmName variable not found in variable group: ${{ parameters.activeVariableGroupName }}"
            exit 1
          fi

          # Set the vmName variable for subsequent pipeline tasks
          echo "##vso[task.setvariable variable=vmName]$vmName"
          echo "Retrieved VM Name: $vmName"
        else
          echo "Using provided vmName: ${{ parameters.vmName }}"

          # If not in default mode, use the parameter
          vmName="${{ parameters.vmName }}"

          # Set the provided vmName as a pipeline variable
          echo "##vso[task.setvariable variable=vmName]$vmName"
        fi

        # Output the VM Name
        echo "VM Name: $vmName"
      env:
        AccessToken: $(System.AccessToken)
      displayName: 'Retrieve or Use Provided VM Name'

    # Step 1: Ensure Python is Installed on the VM
    # - task: AzureCLI@2
    #   inputs:
    #     azureSubscription: ${{ parameters.azureServiceConnection }}
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: |
    #       echo "Ensuring Python is installed on the VM"
    #       output=$(az vm run-command invoke \
    #         --resource-group ${{ parameters.resourceGroupName }} \
    #         --name $(vmName) \
    #         --command-id RunShellScript \
    #         --scripts "if ! command -v python3 &>/dev/null; then
    #                     echo 'Python3 not found. Installing Python3...';
    #                     sudo add-apt-repository -y ppa:deadsnakes/ppa;
    #                     sudo apt-get update;
    #                     sudo apt-get install -y python3.9 python3.9-distutils python3-pip;
    #                     sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1;
    #                   else
    #                     echo 'Python3 is already installed';
    #                   fi" \
    #         --query "value[0].message" -o tsv)
          
    #       echo "output: $output"
          
    #       # Check if output contains stderr and stderr is exactly '[stderr]\n' [empty], if not, consider it an error
    #       if [[ "$output" == *'[stderr]'* && "$output" != *'[stderr]\n'* ]]; then
    #         echo "Error occurred during VM command execution."
    #         exit 1
    #       fi
    #   displayName: 'Ensure Python is Installed on VM'

    # Step 2: Install Python dependencies on the VM (from the requirements.txt file)
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          LOCAL_FILE_PATH="$(Build.SourcesDirectory)" 
          REMOTE_DIRECTORY="/home/$(adminUsername)"

          # Retrieve the public IP address of the VM
          PUBLIC_IP=$(az vm list-ip-addresses --name "$(vmName)" --resource-group "${{ parameters.resourceGroupName }}" --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" --output tsv)
          echo "Public IP of the VM is: $PUBLIC_IP"
          
          echo "Copying requirements.txt and dependencies_setup.sh to VM"
          
          # Use sshpass to copy requirements.txt & dependencies_setup.sh to VM via SCP
          sshpass -p "$(adminPassword)" scp -o StrictHostKeyChecking=no $LOCAL_FILE_PATH/requirements.txt $(adminUsername)@$PUBLIC_IP:$REMOTE_DIRECTORY/requirements.txt
          sshpass -p "$(adminPassword)" scp -o StrictHostKeyChecking=no $LOCAL_FILE_PATH/scripts/dependencies_setup.sh $(adminUsername)@$PUBLIC_IP:$REMOTE_DIRECTORY/dependencies_setup.sh

          echo "Making dependencies_setup.sh executable"
          sshpass -p "$(adminPassword)" ssh -o StrictHostKeyChecking=no $(adminUsername)@$PUBLIC_IP "chmod +x $REMOTE_DIRECTORY/dependencies_setup.sh"

          echo "Executing dependencies_setup.sh on VM"          
          output=$(az vm run-command invoke \
            --resource-group ${{ parameters.resourceGroupName }} \
            --name $(vmName) \
            --command-id RunShellScript \
            --scripts "bash /home/$(adminUsername)/dependencies_setup.sh /home/$(adminUsername)/requirements.txt $REMOTE_DIRECTORY/venv" \
            --query "value[].message" -o tsv)

          echo "output: $output"
          
          # Check if output contains '[stderr]' and does not have an empty stderr message
          # but also check for errors after '[stderr]' (e.g., keywords 'ERROR', 'fail')
          if [[ "$output" == *'[stderr]'* && "$output" != *'[stderr]\n'* && ("$output" == *'ERROR'* || "$output" == *'fail'*) ]]; then
            echo "Error occurred during VM command execution."
            exit 1
          fi

      displayName: 'Install Python required libraries and packages on VM'
